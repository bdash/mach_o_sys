/* automatically generated by rust-bindgen 0.70.1 */

#![allow(
    dead_code,
    non_camel_case_types,
    non_upper_case_globals,
    non_snake_case
)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __MACH_O_FIXUP_CHAINS__: u32 = 6;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_fixups_header {
    pub fixups_version: u32,
    pub starts_offset: u32,
    pub imports_offset: u32,
    pub symbols_offset: u32,
    pub imports_count: u32,
    pub imports_format: u32,
    pub symbols_format: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_starts_in_image {
    pub seg_count: u32,
    pub seg_info_offset: [u32; 1usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_starts_in_segment {
    pub size: u32,
    pub page_size: u16,
    pub pointer_format: u16,
    pub segment_offset: u64,
    pub max_valid_pointer: u32,
    pub page_count: u16,
    pub page_start: [u16; 1usize],
}
pub const DYLD_CHAINED_PTR_START_NONE: _bindgen_ty_1 = _bindgen_ty_1::DYLD_CHAINED_PTR_START_NONE;
pub const DYLD_CHAINED_PTR_START_MULTI: _bindgen_ty_1 = _bindgen_ty_1::DYLD_CHAINED_PTR_START_MULTI;
pub const DYLD_CHAINED_PTR_START_LAST: _bindgen_ty_1 = _bindgen_ty_1::DYLD_CHAINED_PTR_START_MULTI;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    DYLD_CHAINED_PTR_START_NONE = 65535,
    DYLD_CHAINED_PTR_START_MULTI = 32768,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_starts_offsets {
    pub pointer_format: u32,
    pub starts_count: u32,
    pub chain_starts: [u32; 1usize],
}
pub const DYLD_CHAINED_PTR_ARM64E: _bindgen_ty_2 = _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E;
pub const DYLD_CHAINED_PTR_64: _bindgen_ty_2 = _bindgen_ty_2::DYLD_CHAINED_PTR_64;
pub const DYLD_CHAINED_PTR_32: _bindgen_ty_2 = _bindgen_ty_2::DYLD_CHAINED_PTR_32;
pub const DYLD_CHAINED_PTR_32_CACHE: _bindgen_ty_2 = _bindgen_ty_2::DYLD_CHAINED_PTR_32_CACHE;
pub const DYLD_CHAINED_PTR_32_FIRMWARE: _bindgen_ty_2 = _bindgen_ty_2::DYLD_CHAINED_PTR_32_FIRMWARE;
pub const DYLD_CHAINED_PTR_64_OFFSET: _bindgen_ty_2 = _bindgen_ty_2::DYLD_CHAINED_PTR_64_OFFSET;
pub const DYLD_CHAINED_PTR_ARM64E_OFFSET: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E_OFFSET;
pub const DYLD_CHAINED_PTR_ARM64E_KERNEL: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E_OFFSET;
pub const DYLD_CHAINED_PTR_64_KERNEL_CACHE: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_64_KERNEL_CACHE;
pub const DYLD_CHAINED_PTR_ARM64E_USERLAND: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E_USERLAND;
pub const DYLD_CHAINED_PTR_ARM64E_FIRMWARE: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E_FIRMWARE;
pub const DYLD_CHAINED_PTR_X86_64_KERNEL_CACHE: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_X86_64_KERNEL_CACHE;
pub const DYLD_CHAINED_PTR_ARM64E_USERLAND24: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E_USERLAND24;
pub const DYLD_CHAINED_PTR_ARM64E_SHARED_CACHE: _bindgen_ty_2 =
    _bindgen_ty_2::DYLD_CHAINED_PTR_ARM64E_SHARED_CACHE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    DYLD_CHAINED_PTR_ARM64E = 1,
    DYLD_CHAINED_PTR_64 = 2,
    DYLD_CHAINED_PTR_32 = 3,
    DYLD_CHAINED_PTR_32_CACHE = 4,
    DYLD_CHAINED_PTR_32_FIRMWARE = 5,
    DYLD_CHAINED_PTR_64_OFFSET = 6,
    DYLD_CHAINED_PTR_ARM64E_OFFSET = 7,
    DYLD_CHAINED_PTR_64_KERNEL_CACHE = 8,
    DYLD_CHAINED_PTR_ARM64E_USERLAND = 9,
    DYLD_CHAINED_PTR_ARM64E_FIRMWARE = 10,
    DYLD_CHAINED_PTR_X86_64_KERNEL_CACHE = 11,
    DYLD_CHAINED_PTR_ARM64E_USERLAND24 = 12,
    DYLD_CHAINED_PTR_ARM64E_SHARED_CACHE = 13,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_rebase {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_rebase {
    #[inline]
    pub fn target(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 43u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 43u8, val as u64)
        }
    }
    #[inline]
    pub fn high8(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_high8(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: u64,
        high8: u64,
        next: u64,
        bind: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 43u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(43usize, 8u8, {
            let high8: u64 = unsafe { ::std::mem::transmute(high8) };
            high8 as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_bind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_bind {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: u64,
        zero: u64,
        addend: u64,
        next: u64,
        bind: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let addend: u64 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_auth_rebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_auth_rebase {
    #[inline]
    pub fn target(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addrDiv(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addrDiv(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: u64,
        diversity: u64,
        addrDiv: u64,
        key: u64,
        next: u64,
        bind: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addrDiv: u64 = unsafe { ::std::mem::transmute(addrDiv) };
            addrDiv as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_auth_bind {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_auth_bind {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addrDiv(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addrDiv(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: u64,
        zero: u64,
        diversity: u64,
        addrDiv: u64,
        key: u64,
        next: u64,
        bind: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addrDiv: u64 = unsafe { ::std::mem::transmute(addrDiv) };
            addrDiv as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_64_rebase {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_64_rebase {
    #[inline]
    pub fn target(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 36u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 36u8, val as u64)
        }
    }
    #[inline]
    pub fn high8(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_high8(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 7u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: u64,
        high8: u64,
        reserved: u64,
        next: u64,
        bind: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 36u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(36usize, 8u8, {
            let high8: u64 = unsafe { ::std::mem::transmute(high8) };
            high8 as u64
        });
        __bindgen_bitfield_unit.set(44usize, 7u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(51usize, 12u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_bind24 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_bind24 {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: u64,
        zero: u64,
        addend: u64,
        next: u64,
        bind: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let addend: u64 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_auth_bind24 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_auth_bind24 {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addrDiv(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addrDiv(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: u64,
        zero: u64,
        diversity: u64,
        addrDiv: u64,
        key: u64,
        next: u64,
        bind: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addrDiv: u64 = unsafe { ::std::mem::transmute(addrDiv) };
            addrDiv as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_64_bind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_64_bind {
    #[inline]
    pub fn ordinal(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: u64,
        addend: u64,
        reserved: u64,
        next: u64,
        bind: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let addend: u64 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(51usize, 12u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_64_kernel_cache_rebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_64_kernel_cache_rebase {
    #[inline]
    pub fn target(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn cacheLevel(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_cacheLevel(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addrDiv(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addrDiv(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn isAuth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_isAuth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: u64,
        cacheLevel: u64,
        diversity: u64,
        addrDiv: u64,
        key: u64,
        next: u64,
        isAuth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let cacheLevel: u64 = unsafe { ::std::mem::transmute(cacheLevel) };
            cacheLevel as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addrDiv: u64 = unsafe { ::std::mem::transmute(addrDiv) };
            addrDiv as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 12u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let isAuth: u64 = unsafe { ::std::mem::transmute(isAuth) };
            isAuth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_32_rebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dyld_chained_ptr_32_rebase {
    #[inline]
    pub fn target(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: u32,
        next: u32,
        bind: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let target: u32 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(26usize, 5u8, {
            let next: u32 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let bind: u32 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_32_bind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dyld_chained_ptr_32_bind {
    #[inline]
    pub fn ordinal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: u32,
        addend: u32,
        next: u32,
        bind: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let ordinal: u32 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(20usize, 6u8, {
            let addend: u32 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(26usize, 5u8, {
            let next: u32 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let bind: u32 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_32_cache_rebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dyld_chained_ptr_32_cache_rebase {
    #[inline]
    pub fn target(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(target: u32, next: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let target: u32 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let next: u32 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_32_firmware_rebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dyld_chained_ptr_32_firmware_rebase {
    #[inline]
    pub fn target(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_target(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(target: u32, next: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let target: u32 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let next: u32 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_shared_cache_rebase {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_shared_cache_rebase {
    #[inline]
    pub fn runtimeOffset(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 34u8) as u64) }
    }
    #[inline]
    pub fn set_runtimeOffset(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 34u8, val as u64)
        }
    }
    #[inline]
    pub fn high8(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_high8(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 10u8) as u64) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(52usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(52usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        runtimeOffset: u64,
        high8: u64,
        unused: u64,
        next: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 34u8, {
            let runtimeOffset: u64 = unsafe { ::std::mem::transmute(runtimeOffset) };
            runtimeOffset as u64
        });
        __bindgen_bitfield_unit.set(34usize, 8u8, {
            let high8: u64 = unsafe { ::std::mem::transmute(high8) };
            high8 as u64
        });
        __bindgen_bitfield_unit.set(42usize, 10u8, {
            let unused: u64 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit.set(52usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_ptr_arm64e_shared_cache_auth_rebase {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl dyld_chained_ptr_arm64e_shared_cache_auth_rebase {
    #[inline]
    pub fn runtimeOffset(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 34u8) as u64) }
    }
    #[inline]
    pub fn set_runtimeOffset(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 34u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addrDiv(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(50usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addrDiv(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(50usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keyIsData(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_keyIsData(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(52usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(52usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        runtimeOffset: u64,
        diversity: u64,
        addrDiv: u64,
        keyIsData: u64,
        next: u64,
        auth: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 34u8, {
            let runtimeOffset: u64 = unsafe { ::std::mem::transmute(runtimeOffset) };
            runtimeOffset as u64
        });
        __bindgen_bitfield_unit.set(34usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(50usize, 1u8, {
            let addrDiv: u64 = unsafe { ::std::mem::transmute(addrDiv) };
            addrDiv as u64
        });
        __bindgen_bitfield_unit.set(51usize, 1u8, {
            let keyIsData: u64 = unsafe { ::std::mem::transmute(keyIsData) };
            keyIsData as u64
        });
        __bindgen_bitfield_unit.set(52usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const DYLD_CHAINED_IMPORT: _bindgen_ty_3 = _bindgen_ty_3::DYLD_CHAINED_IMPORT;
pub const DYLD_CHAINED_IMPORT_ADDEND: _bindgen_ty_3 = _bindgen_ty_3::DYLD_CHAINED_IMPORT_ADDEND;
pub const DYLD_CHAINED_IMPORT_ADDEND64: _bindgen_ty_3 = _bindgen_ty_3::DYLD_CHAINED_IMPORT_ADDEND64;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_3 {
    DYLD_CHAINED_IMPORT = 1,
    DYLD_CHAINED_IMPORT_ADDEND = 2,
    DYLD_CHAINED_IMPORT_ADDEND64 = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_import {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dyld_chained_import {
    #[inline]
    pub fn lib_ordinal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn weak_import(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn name_offset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: u32,
        weak_import: u32,
        name_offset: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let lib_ordinal: u32 = unsafe { ::std::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weak_import: u32 = unsafe { ::std::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let name_offset: u32 = unsafe { ::std::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_import_addend {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub addend: i32,
}
impl dyld_chained_import_addend {
    #[inline]
    pub fn lib_ordinal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn weak_import(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn name_offset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: u32,
        weak_import: u32,
        name_offset: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let lib_ordinal: u32 = unsafe { ::std::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weak_import: u32 = unsafe { ::std::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let name_offset: u32 = unsafe { ::std::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dyld_chained_import_addend64 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub addend: u64,
}
impl dyld_chained_import_addend64 {
    #[inline]
    pub fn lib_ordinal(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn weak_import(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn name_offset(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: u64,
        weak_import: u64,
        reserved: u64,
        name_offset: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let lib_ordinal: u64 = unsafe { ::std::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let weak_import: u64 = unsafe { ::std::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let name_offset: u64 = unsafe { ::std::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
