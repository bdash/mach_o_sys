/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl ::std::default::Default for __darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for _opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for _opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for _opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for _opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 {
    OSUnknownByteOrder = 0,
    OSLittleEndian = 1,
    OSBigEndian = 2,
}
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NXByteOrder {
    NX_UnknownByteOrder = 0,
    NX_LittleEndian = 1,
    NX_BigEndian = 2,
}
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = uintptr_t;
pub type vm_size_t = uintptr_t;
pub type mach_vm_address_t = uint64_t;
pub type mach_vm_offset_t = uint64_t;
pub type mach_vm_size_t = uint64_t;
pub type vm_map_offset_t = uint64_t;
pub type vm_map_address_t = uint64_t;
pub type vm_map_size_t = uint64_t;
pub type mach_port_context_t = mach_vm_address_t;
pub type boolean_t = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fat_header {
    pub magic: uint32_t,
    pub nfat_arch: uint32_t,
}
impl ::std::default::Default for fat_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fat_arch {
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub offset: uint32_t,
    pub size: uint32_t,
    pub align: uint32_t,
}
impl ::std::default::Default for fat_arch {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_prot_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
impl ::std::default::Default for __darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_fp_control {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for __darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_fp_status {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for __darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
impl ::std::default::Default for __darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for __darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for __darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
impl ::std::clone::Clone for __darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::default::Default for __darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
impl ::std::default::Default for __darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::default::Default for __darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for __darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
impl ::std::clone::Clone for __darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::default::Default for __darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::default::Default for __darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
impl ::std::default::Default for mach_port_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
impl ::std::default::Default for mach_port_limits {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [uint32_t; 6usize],
}
impl ::std::default::Default for mach_port_info_ext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_info_ext_t = mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_qos {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: boolean_t,
    pub len: natural_t,
}
impl ::std::default::Default for mach_port_qos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_options {
    pub flags: uint32_t,
    pub mpl: mach_port_limits_t,
    pub reserved: [uint64_t; 2usize],
}
impl ::std::default::Default for mach_port_options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum mach_port_guard_exception_codes {
    kGUARD_EXC_DESTROY = 1,
    kGUARD_EXC_MOD_REFS = 2,
    kGUARD_EXC_SET_CONTEXT = 4,
    kGUARD_EXC_UNGUARDED = 8,
    kGUARD_EXC_INCORRECT_GUARD = 16,
}
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_type_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_type_name_t,
    pub _bindgen_bitfield_3_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_port_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: uint32_t,
    pub size: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_ool_descriptor32_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_descriptor64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: uint32_t,
    pub count: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_ool_ports_descriptor32_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_ports_descriptor64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_ports_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_descriptor_t {
    pub _bindgen_data_: [u32; 4usize],
}
impl mach_msg_descriptor_t {
    pub unsafe fn port(&mut self) -> *mut mach_msg_port_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn out_of_line(&mut self) -> *mut mach_msg_ool_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ool_ports(&mut self)
     -> *mut mach_msg_ool_ports_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn type_(&mut self) -> *mut mach_msg_type_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for mach_msg_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_body_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
impl ::std::default::Default for mach_msg_header_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
impl ::std::default::Default for mach_msg_base_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
impl ::std::default::Default for mach_msg_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
impl ::std::default::Default for mach_msg_seqno_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
impl ::std::default::Default for security_token_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
impl ::std::default::Default for mach_msg_security_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
impl ::std::default::Default for audit_token_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
impl ::std::default::Default for mach_msg_audit_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
impl ::std::default::Default for mach_msg_context_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
impl ::std::default::Default for msg_labels_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::std::os::raw::c_int,
    pub msgh_labels: msg_labels_t,
}
impl ::std::default::Default for mach_msg_mac_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
impl ::std::default::Default for mach_msg_empty_send_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
impl ::std::default::Default for mach_msg_empty_rcv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_empty_t {
    pub _bindgen_data_: [u32; 8usize],
}
impl mach_msg_empty_t {
    pub unsafe fn send(&mut self) -> *mut mach_msg_empty_send_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rcv(&mut self) -> *mut mach_msg_empty_rcv_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for mach_msg_empty_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_state_hdr {
    pub flavor: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
impl ::std::default::Default for x86_state_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: Union_Unnamed2,
}
impl ::std::default::Default for x86_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u64; 21usize],
}
impl Union_Unnamed2 {
    pub unsafe fn ts32(&mut self) -> *mut x86_thread_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ts64(&mut self) -> *mut x86_thread_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: Union_Unnamed3,
}
impl ::std::default::Default for x86_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 131usize],
}
impl Union_Unnamed3 {
    pub unsafe fn fs32(&mut self) -> *mut x86_float_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fs64(&mut self) -> *mut x86_float_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: Union_Unnamed4,
}
impl ::std::default::Default for x86_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed4 {
    pub unsafe fn es32(&mut self) -> *mut x86_exception_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn es64(&mut self) -> *mut x86_exception_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: Union_Unnamed5,
}
impl ::std::default::Default for x86_debug_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u64; 8usize],
}
impl Union_Unnamed5 {
    pub unsafe fn ds32(&mut self) -> *mut x86_debug_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ds64(&mut self) -> *mut x86_debug_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: Union_Unnamed6,
}
impl ::std::default::Default for x86_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u32; 211usize],
}
impl Union_Unnamed6 {
    pub unsafe fn as32(&mut self) -> *mut x86_avx_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as64(&mut self) -> *mut x86_avx_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_header {
    pub magic: uint32_t,
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub filetype: uint32_t,
    pub ncmds: uint32_t,
    pub sizeofcmds: uint32_t,
    pub flags: uint32_t,
}
impl ::std::default::Default for mach_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_header_64 {
    pub magic: uint32_t,
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub filetype: uint32_t,
    pub ncmds: uint32_t,
    pub sizeofcmds: uint32_t,
    pub flags: uint32_t,
    pub reserved: uint32_t,
}
impl ::std::default::Default for mach_header_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct load_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
}
impl ::std::default::Default for load_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lc_str {
    pub _bindgen_data_: [u32; 1usize],
}
impl lc_str {
    pub unsafe fn offset(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for lc_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct segment_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: uint32_t,
    pub vmsize: uint32_t,
    pub fileoff: uint32_t,
    pub filesize: uint32_t,
    pub maxprot: vm_prot_t,
    pub initprot: vm_prot_t,
    pub nsects: uint32_t,
    pub flags: uint32_t,
}
impl ::std::default::Default for segment_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct segment_command_64 {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: uint64_t,
    pub vmsize: uint64_t,
    pub fileoff: uint64_t,
    pub filesize: uint64_t,
    pub maxprot: vm_prot_t,
    pub initprot: vm_prot_t,
    pub nsects: uint32_t,
    pub flags: uint32_t,
}
impl ::std::default::Default for segment_command_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct section {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: uint32_t,
    pub size: uint32_t,
    pub offset: uint32_t,
    pub align: uint32_t,
    pub reloff: uint32_t,
    pub nreloc: uint32_t,
    pub flags: uint32_t,
    pub reserved1: uint32_t,
    pub reserved2: uint32_t,
}
impl ::std::default::Default for section {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct section_64 {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: uint64_t,
    pub size: uint64_t,
    pub offset: uint32_t,
    pub align: uint32_t,
    pub reloff: uint32_t,
    pub nreloc: uint32_t,
    pub flags: uint32_t,
    pub reserved1: uint32_t,
    pub reserved2: uint32_t,
    pub reserved3: uint32_t,
}
impl ::std::default::Default for section_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fvmlib {
    pub name: lc_str,
    pub minor_version: uint32_t,
    pub header_addr: uint32_t,
}
impl ::std::default::Default for fvmlib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fvmlib_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub fvmlib: fvmlib,
}
impl ::std::default::Default for fvmlib_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib {
    pub name: lc_str,
    pub timestamp: uint32_t,
    pub current_version: uint32_t,
    pub compatibility_version: uint32_t,
}
impl ::std::default::Default for dylib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub dylib: dylib,
}
impl ::std::default::Default for dylib_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_framework_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub umbrella: lc_str,
}
impl ::std::default::Default for sub_framework_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_client_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub client: lc_str,
}
impl ::std::default::Default for sub_client_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_umbrella_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub sub_umbrella: lc_str,
}
impl ::std::default::Default for sub_umbrella_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_library_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub sub_library: lc_str,
}
impl ::std::default::Default for sub_library_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct prebound_dylib_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub name: lc_str,
    pub nmodules: uint32_t,
    pub linked_modules: lc_str,
}
impl ::std::default::Default for prebound_dylib_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylinker_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub name: lc_str,
}
impl ::std::default::Default for dylinker_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct thread_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
}
impl ::std::default::Default for thread_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct routines_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub init_address: uint32_t,
    pub init_module: uint32_t,
    pub reserved1: uint32_t,
    pub reserved2: uint32_t,
    pub reserved3: uint32_t,
    pub reserved4: uint32_t,
    pub reserved5: uint32_t,
    pub reserved6: uint32_t,
}
impl ::std::default::Default for routines_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct routines_command_64 {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub init_address: uint64_t,
    pub init_module: uint64_t,
    pub reserved1: uint64_t,
    pub reserved2: uint64_t,
    pub reserved3: uint64_t,
    pub reserved4: uint64_t,
    pub reserved5: uint64_t,
    pub reserved6: uint64_t,
}
impl ::std::default::Default for routines_command_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct symtab_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub symoff: uint32_t,
    pub nsyms: uint32_t,
    pub stroff: uint32_t,
    pub strsize: uint32_t,
}
impl ::std::default::Default for symtab_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dysymtab_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub ilocalsym: uint32_t,
    pub nlocalsym: uint32_t,
    pub iextdefsym: uint32_t,
    pub nextdefsym: uint32_t,
    pub iundefsym: uint32_t,
    pub nundefsym: uint32_t,
    pub tocoff: uint32_t,
    pub ntoc: uint32_t,
    pub modtaboff: uint32_t,
    pub nmodtab: uint32_t,
    pub extrefsymoff: uint32_t,
    pub nextrefsyms: uint32_t,
    pub indirectsymoff: uint32_t,
    pub nindirectsyms: uint32_t,
    pub extreloff: uint32_t,
    pub nextrel: uint32_t,
    pub locreloff: uint32_t,
    pub nlocrel: uint32_t,
}
impl ::std::default::Default for dysymtab_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_table_of_contents {
    pub symbol_index: uint32_t,
    pub module_index: uint32_t,
}
impl ::std::default::Default for dylib_table_of_contents {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_module {
    pub module_name: uint32_t,
    pub iextdefsym: uint32_t,
    pub nextdefsym: uint32_t,
    pub irefsym: uint32_t,
    pub nrefsym: uint32_t,
    pub ilocalsym: uint32_t,
    pub nlocalsym: uint32_t,
    pub iextrel: uint32_t,
    pub nextrel: uint32_t,
    pub iinit_iterm: uint32_t,
    pub ninit_nterm: uint32_t,
    pub objc_module_info_addr: uint32_t,
    pub objc_module_info_size: uint32_t,
}
impl ::std::default::Default for dylib_module {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_module_64 {
    pub module_name: uint32_t,
    pub iextdefsym: uint32_t,
    pub nextdefsym: uint32_t,
    pub irefsym: uint32_t,
    pub nrefsym: uint32_t,
    pub ilocalsym: uint32_t,
    pub nlocalsym: uint32_t,
    pub iextrel: uint32_t,
    pub nextrel: uint32_t,
    pub iinit_iterm: uint32_t,
    pub ninit_nterm: uint32_t,
    pub objc_module_info_size: uint32_t,
    pub objc_module_info_addr: uint64_t,
}
impl ::std::default::Default for dylib_module_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_reference {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
}
impl ::std::default::Default for dylib_reference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct twolevel_hints_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub offset: uint32_t,
    pub nhints: uint32_t,
}
impl ::std::default::Default for twolevel_hints_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct twolevel_hint {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
}
impl ::std::default::Default for twolevel_hint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct prebind_cksum_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub cksum: uint32_t,
}
impl ::std::default::Default for prebind_cksum_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uuid_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub uuid: [uint8_t; 16usize],
}
impl ::std::default::Default for uuid_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rpath_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub path: lc_str,
}
impl ::std::default::Default for rpath_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linkedit_data_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub dataoff: uint32_t,
    pub datasize: uint32_t,
}
impl ::std::default::Default for linkedit_data_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct encryption_info_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub cryptoff: uint32_t,
    pub cryptsize: uint32_t,
    pub cryptid: uint32_t,
}
impl ::std::default::Default for encryption_info_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct encryption_info_command_64 {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub cryptoff: uint32_t,
    pub cryptsize: uint32_t,
    pub cryptid: uint32_t,
    pub pad: uint32_t,
}
impl ::std::default::Default for encryption_info_command_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct version_min_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub version: uint32_t,
    pub sdk: uint32_t,
}
impl ::std::default::Default for version_min_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dyld_info_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub rebase_off: uint32_t,
    pub rebase_size: uint32_t,
    pub bind_off: uint32_t,
    pub bind_size: uint32_t,
    pub weak_bind_off: uint32_t,
    pub weak_bind_size: uint32_t,
    pub lazy_bind_off: uint32_t,
    pub lazy_bind_size: uint32_t,
    pub export_off: uint32_t,
    pub export_size: uint32_t,
}
impl ::std::default::Default for dyld_info_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linker_option_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub count: uint32_t,
}
impl ::std::default::Default for linker_option_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct symseg_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub offset: uint32_t,
    pub size: uint32_t,
}
impl ::std::default::Default for symseg_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ident_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
}
impl ::std::default::Default for ident_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fvmfile_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub name: lc_str,
    pub header_addr: uint32_t,
}
impl ::std::default::Default for fvmfile_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct entry_point_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub entryoff: uint64_t,
    pub stacksize: uint64_t,
}
impl ::std::default::Default for entry_point_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct source_version_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub version: uint64_t,
}
impl ::std::default::Default for source_version_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct data_in_code_entry {
    pub offset: uint32_t,
    pub length: uint16_t,
    pub kind: uint16_t,
}
impl ::std::default::Default for data_in_code_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tlv_descriptor {
    pub thunk: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut tlv_descriptor)
                                         -> *mut ::std::os::raw::c_void>,
    pub key: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for tlv_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nlist {
    pub n_un: Union_Unnamed7,
    pub n_type: uint8_t,
    pub n_sect: uint8_t,
    pub n_desc: int16_t,
    pub n_value: uint32_t,
}
impl ::std::default::Default for nlist {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed7 {
    pub unsafe fn n_strx(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nlist_64 {
    pub n_un: Union_Unnamed8,
    pub n_type: uint8_t,
    pub n_sect: uint8_t,
    pub n_desc: uint16_t,
    pub n_value: uint64_t,
}
impl ::std::default::Default for nlist_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn n_strx(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct relocation_info {
    pub r_address: int32_t,
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
    pub _bindgen_bitfield_3_: uint32_t,
    pub _bindgen_bitfield_4_: uint32_t,
    pub _bindgen_bitfield_5_: uint32_t,
}
impl ::std::default::Default for relocation_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct scattered_relocation_info {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
    pub _bindgen_bitfield_3_: uint32_t,
    pub _bindgen_bitfield_4_: uint32_t,
    pub _bindgen_bitfield_5_: uint32_t,
    pub r_value: int32_t,
}
impl ::std::default::Default for scattered_relocation_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum reloc_type_generic {
    GENERIC_RELOC_VANILLA = 0,
    GENERIC_RELOC_PAIR = 1,
    GENERIC_RELOC_SECTDIFF = 2,
    GENERIC_RELOC_PB_LA_PTR = 3,
    GENERIC_RELOC_LOCAL_SECTDIFF = 4,
    GENERIC_RELOC_TLV = 5,
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = usize;
pub type ssize_t = isize;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ranlib {
    pub ran_un: Union_Unnamed9,
    pub ran_off: uint32_t,
}
impl ::std::default::Default for ranlib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn ran_strx(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut KERNEL_SECURITY_TOKEN: security_token_t;
    pub static mut KERNEL_AUDIT_TOKEN: audit_token_t;
}
extern "C" {
    pub fn mach_msg_overwrite(msg: *mut mach_msg_header_t,
                              option: mach_msg_option_t,
                              send_size: mach_msg_size_t,
                              rcv_size: mach_msg_size_t,
                              rcv_name: mach_port_name_t,
                              timeout: mach_msg_timeout_t,
                              notify: mach_port_name_t,
                              rcv_msg: *mut mach_msg_header_t,
                              rcv_limit: mach_msg_size_t)
     -> mach_msg_return_t;
    pub fn mach_msg(msg: *mut mach_msg_header_t, option: mach_msg_option_t,
                    send_size: mach_msg_size_t, rcv_size: mach_msg_size_t,
                    rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t,
                    notify: mach_port_name_t) -> mach_msg_return_t;
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t)
     -> kern_return_t;
    pub fn nlist(filename: *const ::std::os::raw::c_char, list: *mut nlist)
     -> ::std::os::raw::c_int;
    pub fn swap_fat_header(fat_header: *mut fat_header,
                           target_byte_order: NXByteOrder);
    pub fn swap_fat_arch(fat_archs: *mut fat_arch, nfat_arch: uint32_t,
                         target_byte_order: NXByteOrder);
    pub fn swap_mach_header(mh: *mut mach_header,
                            target_byte_order: NXByteOrder);
    pub fn swap_mach_header_64(mh: *mut mach_header_64,
                               target_byte_order: NXByteOrder);
    pub fn swap_load_command(lc: *mut load_command,
                             target_byte_order: NXByteOrder);
    pub fn swap_segment_command(sg: *mut segment_command,
                                target_byte_order: NXByteOrder);
    pub fn swap_segment_command_64(sg: *mut segment_command_64,
                                   target_byte_order: NXByteOrder);
    pub fn swap_section(s: *mut section, nsects: uint32_t,
                        target_byte_order: NXByteOrder);
    pub fn swap_section_64(s: *mut section_64, nsects: uint32_t,
                           target_byte_order: NXByteOrder);
    pub fn swap_symtab_command(st: *mut symtab_command,
                               target_byte_order: NXByteOrder);
    pub fn swap_dysymtab_command(dyst: *mut dysymtab_command,
                                 target_byte_sex: NXByteOrder);
    pub fn swap_symseg_command(ss: *mut symseg_command,
                               target_byte_order: NXByteOrder);
    pub fn swap_fvmlib_command(fl: *mut fvmlib_command,
                               target_byte_order: NXByteOrder);
    pub fn swap_dylib_command(dl: *mut dylib_command,
                              target_byte_sex: NXByteOrder);
    pub fn swap_sub_framework_command(sub: *mut sub_framework_command,
                                      target_byte_sex: NXByteOrder);
    pub fn swap_sub_umbrella_command(usub: *mut sub_umbrella_command,
                                     target_byte_sex: NXByteOrder);
    pub fn swap_sub_library_command(lsub: *mut sub_library_command,
                                    target_byte_sex: NXByteOrder);
    pub fn swap_sub_client_command(csub: *mut sub_client_command,
                                   target_byte_sex: NXByteOrder);
    pub fn swap_prebound_dylib_command(pbdylib: *mut prebound_dylib_command,
                                       target_byte_sex: NXByteOrder);
    pub fn swap_dylinker_command(dyld: *mut dylinker_command,
                                 target_byte_sex: NXByteOrder);
    pub fn swap_fvmfile_command(ff: *mut fvmfile_command,
                                target_byte_order: NXByteOrder);
    pub fn swap_thread_command(ut: *mut thread_command,
                               target_byte_order: NXByteOrder);
    pub fn swap_ident_command(ident: *mut ident_command,
                              target_byte_order: NXByteOrder);
    pub fn swap_routines_command(r_cmd: *mut routines_command,
                                 target_byte_sex: NXByteOrder);
    pub fn swap_routines_command_64(r_cmd: *mut routines_command_64,
                                    target_byte_sex: NXByteOrder);
    pub fn swap_twolevel_hints_command(hints_cmd: *mut twolevel_hints_command,
                                       target_byte_sex: NXByteOrder);
    pub fn swap_prebind_cksum_command(cksum_cmd: *mut prebind_cksum_command,
                                      target_byte_sex: NXByteOrder);
    pub fn swap_uuid_command(uuid_cmd: *mut uuid_command,
                             target_byte_sex: NXByteOrder);
    pub fn swap_linkedit_data_command(ld: *mut linkedit_data_command,
                                      target_byte_sex: NXByteOrder);
    pub fn swap_version_min_command(ver_cmd: *mut version_min_command,
                                    target_byte_sex: NXByteOrder);
    pub fn swap_rpath_command(rpath_cmd: *mut rpath_command,
                              target_byte_sex: NXByteOrder);
    pub fn swap_encryption_command(ec: *mut encryption_info_command,
                                   target_byte_sex: NXByteOrder);
    pub fn swap_encryption_command_64(ec: *mut encryption_info_command_64,
                                      target_byte_sex: NXByteOrder);
    pub fn swap_linker_option_command(lo: *mut linker_option_command,
                                      target_byte_sex: NXByteOrder);
    pub fn swap_dyld_info_command(ed: *mut dyld_info_command,
                                  target_byte_sex: NXByteOrder);
    pub fn swap_entry_point_command(ep: *mut entry_point_command,
                                    target_byte_sex: NXByteOrder);
    pub fn swap_source_version_command(sv: *mut source_version_command,
                                       target_byte_sex: NXByteOrder);
    pub fn swap_twolevel_hint(hints: *mut twolevel_hint, nhints: uint32_t,
                              target_byte_sex: NXByteOrder);
    pub fn swap_nlist(symbols: *mut nlist, nsymbols: uint32_t,
                      target_byte_order: NXByteOrder);
    pub fn swap_nlist_64(symbols: *mut nlist_64, nsymbols: uint32_t,
                         target_byte_order: NXByteOrder);
    pub fn swap_ranlib(ranlibs: *mut ranlib, nranlibs: uint32_t,
                       target_byte_order: NXByteOrder);
    pub fn swap_relocation_info(relocs: *mut relocation_info,
                                nrelocs: uint32_t,
                                target_byte_order: NXByteOrder);
    pub fn swap_indirect_symbols(indirect_symbols: *mut uint32_t,
                                 nindirect_symbols: uint32_t,
                                 target_byte_sex: NXByteOrder);
    pub fn swap_dylib_reference(refs: *mut dylib_reference, nrefs: uint32_t,
                                target_byte_sex: NXByteOrder);
    pub fn swap_dylib_module(mods: *mut dylib_module, nmods: uint32_t,
                             target_byte_sex: NXByteOrder);
    pub fn swap_dylib_module_64(mods: *mut dylib_module_64, nmods: uint32_t,
                                target_byte_sex: NXByteOrder);
    pub fn swap_dylib_table_of_contents(tocs: *mut dylib_table_of_contents,
                                        ntocs: uint32_t,
                                        target_byte_sex: NXByteOrder);
}
