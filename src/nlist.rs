/* automatically generated by rust-bindgen 0.70.1 */

#![allow(
    dead_code,
    non_camel_case_types,
    non_upper_case_globals,
    non_snake_case
)]

pub const N_STAB: u32 = 224;
pub const N_PEXT: u32 = 16;
pub const N_TYPE: u32 = 14;
pub const N_EXT: u32 = 1;
pub const N_UNDF: u32 = 0;
pub const N_ABS: u32 = 2;
pub const N_SECT: u32 = 14;
pub const N_PBUD: u32 = 12;
pub const N_INDR: u32 = 10;
pub const NO_SECT: u32 = 0;
pub const MAX_SECT: u32 = 255;
pub const REFERENCE_TYPE: u32 = 7;
pub const REFERENCE_FLAG_UNDEFINED_NON_LAZY: u32 = 0;
pub const REFERENCE_FLAG_UNDEFINED_LAZY: u32 = 1;
pub const REFERENCE_FLAG_DEFINED: u32 = 2;
pub const REFERENCE_FLAG_PRIVATE_DEFINED: u32 = 3;
pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY: u32 = 4;
pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY: u32 = 5;
pub const REFERENCED_DYNAMICALLY: u32 = 16;
pub const SELF_LIBRARY_ORDINAL: u32 = 0;
pub const MAX_LIBRARY_ORDINAL: u32 = 253;
pub const DYNAMIC_LOOKUP_ORDINAL: u32 = 254;
pub const EXECUTABLE_ORDINAL: u32 = 255;
pub const N_NO_DEAD_STRIP: u32 = 32;
pub const N_DESC_DISCARDED: u32 = 32;
pub const N_WEAK_REF: u32 = 64;
pub const N_WEAK_DEF: u32 = 128;
pub const N_REF_TO_WEAK: u32 = 128;
pub const N_ARM_THUMB_DEF: u32 = 8;
pub const N_SYMBOL_RESOLVER: u32 = 256;
pub const N_ALT_ENTRY: u32 = 512;
pub const N_COLD_FUNC: u32 = 1024;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nlist {
    pub n_un: nlist__bindgen_ty_1,
    pub n_type: u8,
    pub n_sect: u8,
    pub n_desc: i16,
    pub n_value: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nlist__bindgen_ty_1 {
    pub n_strx: u32,
}
impl Default for nlist__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nlist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nlist_64 {
    pub n_un: nlist_64__bindgen_ty_1,
    pub n_type: u8,
    pub n_sect: u8,
    pub n_desc: u16,
    pub n_value: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nlist_64__bindgen_ty_1 {
    pub n_strx: u32,
}
impl Default for nlist_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for nlist_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn nlist(
        filename: *const ::std::os::raw::c_char,
        list: *mut nlist,
    ) -> ::std::os::raw::c_int;
}
