/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uchar = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uchar = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uchar = 0;
pub const __DARWIN_C_ANSI: ::std::os::raw::c_ushort = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uchar = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uchar = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uchar = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uchar = 3;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_ushort = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uchar = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uchar = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uchar = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uchar = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uchar = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uchar = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uchar = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uchar = 16;
pub const INT8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::std::os::raw::c_char = -128;
pub const INT16_MIN: ::std::os::raw::c_short = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT64_MAX: ::std::os::raw::c_char = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_short = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_char = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_char = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_short = -32768;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uchar = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ushort = 32767;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uchar = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_ushort = 65535;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_char = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_char = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_char = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_char = -1;
pub const RSIZE_MAX: ::std::os::raw::c_char = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const BYTE_SIZE: ::std::os::raw::c_uchar = 8;
pub const I386_PGBYTES: ::std::os::raw::c_ushort = 4096;
pub const I386_PGSHIFT: ::std::os::raw::c_uchar = 12;
pub const PAGE_SIZE: ::std::os::raw::c_ushort = 4096;
pub const PAGE_SHIFT: ::std::os::raw::c_uchar = 12;
pub const PAGE_MASK: ::std::os::raw::c_ushort = 4095;
pub const PAGE_MAX_SHIFT: ::std::os::raw::c_uchar = 12;
pub const PAGE_MAX_SIZE: ::std::os::raw::c_ushort = 4096;
pub const PAGE_MAX_MASK: ::std::os::raw::c_ushort = 4095;
pub const PAGE_MIN_SHIFT: ::std::os::raw::c_uchar = 12;
pub const PAGE_MIN_SIZE: ::std::os::raw::c_ushort = 4096;
pub const PAGE_MIN_MASK: ::std::os::raw::c_ushort = 4095;
pub const I386_LPGBYTES: ::std::os::raw::c_uint = 2097152;
pub const I386_LPGSHIFT: ::std::os::raw::c_uchar = 21;
pub const I386_LPGMASK: ::std::os::raw::c_uint = 2097151;
pub const TRUE: ::std::os::raw::c_uchar = 1;
pub const FALSE: ::std::os::raw::c_uchar = 0;
pub const CPU_STATE_MAX: ::std::os::raw::c_uchar = 4;
pub const CPU_STATE_USER: ::std::os::raw::c_uchar = 0;
pub const CPU_STATE_SYSTEM: ::std::os::raw::c_uchar = 1;
pub const CPU_STATE_IDLE: ::std::os::raw::c_uchar = 2;
pub const CPU_STATE_NICE: ::std::os::raw::c_uchar = 3;
pub const CPU_ARCH_MASK: ::std::os::raw::c_uint = 4278190080;
pub const CPU_ARCH_ABI64: ::std::os::raw::c_uint = 16777216;
pub const CPU_SUBTYPE_MASK: ::std::os::raw::c_uint = 4278190080;
pub const CPU_SUBTYPE_LIB64: ::std::os::raw::c_uint = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: ::std::os::raw::c_uchar = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: ::std::os::raw::c_uchar = 0;
pub const CPUFAMILY_UNKNOWN: ::std::os::raw::c_uchar = 0;
pub const CPUFAMILY_POWERPC_G3: ::std::os::raw::c_uint = 3471054153;
pub const CPUFAMILY_POWERPC_G4: ::std::os::raw::c_uint = 2009171118;
pub const CPUFAMILY_POWERPC_G5: ::std::os::raw::c_uint = 3983988906;
pub const CPUFAMILY_INTEL_6_13: ::std::os::raw::c_uint = 2855483691;
pub const CPUFAMILY_INTEL_YONAH: ::std::os::raw::c_uint = 1943433984;
pub const CPUFAMILY_INTEL_MEROM: ::std::os::raw::c_uint = 1114597871;
pub const CPUFAMILY_INTEL_PENRYN: ::std::os::raw::c_uint = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: ::std::os::raw::c_uint = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: ::std::os::raw::c_uint = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: ::std::os::raw::c_uint = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: ::std::os::raw::c_uint = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: ::std::os::raw::c_uint = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: ::std::os::raw::c_uint = 1479463068;
pub const CPUFAMILY_ARM_9: ::std::os::raw::c_uint = 3878847406;
pub const CPUFAMILY_ARM_11: ::std::os::raw::c_uint = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: ::std::os::raw::c_uint = 1404044789;
pub const CPUFAMILY_ARM_12: ::std::os::raw::c_uint = 3172666089;
pub const CPUFAMILY_ARM_13: ::std::os::raw::c_uint = 214503012;
pub const CPUFAMILY_ARM_14: ::std::os::raw::c_uint = 2517073649;
pub const CPUFAMILY_ARM_15: ::std::os::raw::c_uint = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: ::std::os::raw::c_uint = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: ::std::os::raw::c_uint = 933271106;
pub const CPUFAMILY_INTEL_6_14: ::std::os::raw::c_uint = 1943433984;
pub const CPUFAMILY_INTEL_6_15: ::std::os::raw::c_uint = 1114597871;
pub const CPUFAMILY_INTEL_6_23: ::std::os::raw::c_uint = 2028621756;
pub const CPUFAMILY_INTEL_6_26: ::std::os::raw::c_uint = 1801080018;
pub const CPUFAMILY_INTEL_CORE: ::std::os::raw::c_uint = 1943433984;
pub const CPUFAMILY_INTEL_CORE2: ::std::os::raw::c_uint = 1114597871;
pub const FP_PREC_24B: ::std::os::raw::c_uchar = 0;
pub const FP_PREC_53B: ::std::os::raw::c_uchar = 2;
pub const FP_PREC_64B: ::std::os::raw::c_uchar = 3;
pub const FP_RND_NEAR: ::std::os::raw::c_uchar = 0;
pub const FP_RND_DOWN: ::std::os::raw::c_uchar = 1;
pub const FP_RND_UP: ::std::os::raw::c_uchar = 2;
pub const FP_CHOP: ::std::os::raw::c_uchar = 3;
pub const FP_STATE_BYTES: ::std::os::raw::c_ushort = 512;
pub const MACH_PORT_NULL: ::std::os::raw::c_uchar = 0;
pub const MACH_PORT_TYPE_DNREQUEST: ::std::os::raw::c_uint = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: ::std::os::raw::c_uint = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: ::std::os::raw::c_uint =
    536870912;
pub const MACH_PORT_SRIGHTS_NONE: ::std::os::raw::c_uchar = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: ::std::os::raw::c_uchar = 1;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: ::std::os::raw::c_uchar = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: ::std::os::raw::c_uchar = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: ::std::os::raw::c_uchar = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: ::std::os::raw::c_uchar = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: ::std::os::raw::c_uchar = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: ::std::os::raw::c_uchar = 32;
pub const MACH_PORT_LIMITS_INFO: ::std::os::raw::c_uchar = 1;
pub const MACH_PORT_RECEIVE_STATUS: ::std::os::raw::c_uchar = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: ::std::os::raw::c_uchar = 3;
pub const MACH_PORT_TEMPOWNER: ::std::os::raw::c_uchar = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: ::std::os::raw::c_uchar = 5;
pub const MACH_PORT_DENAP_RECEIVER: ::std::os::raw::c_uchar = 6;
pub const MACH_PORT_INFO_EXT: ::std::os::raw::c_uchar = 7;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: ::std::os::raw::c_uchar = 1;
pub const MPO_CONTEXT_AS_GUARD: ::std::os::raw::c_uchar = 1;
pub const MPO_QLIMIT: ::std::os::raw::c_uchar = 2;
pub const MPO_TEMPOWNER: ::std::os::raw::c_uchar = 4;
pub const MPO_IMPORTANCE_RECEIVER: ::std::os::raw::c_uchar = 8;
pub const MPO_INSERT_SEND_RIGHT: ::std::os::raw::c_uchar = 16;
pub const MPO_STRICT: ::std::os::raw::c_uchar = 32;
pub const MPO_DENAP_RECEIVER: ::std::os::raw::c_uchar = 64;
pub const GUARD_TYPE_MACH_PORT: ::std::os::raw::c_uchar = 1;
pub const KERN_SUCCESS: ::std::os::raw::c_uchar = 0;
pub const KERN_INVALID_ADDRESS: ::std::os::raw::c_uchar = 1;
pub const KERN_PROTECTION_FAILURE: ::std::os::raw::c_uchar = 2;
pub const KERN_NO_SPACE: ::std::os::raw::c_uchar = 3;
pub const KERN_INVALID_ARGUMENT: ::std::os::raw::c_uchar = 4;
pub const KERN_FAILURE: ::std::os::raw::c_uchar = 5;
pub const KERN_RESOURCE_SHORTAGE: ::std::os::raw::c_uchar = 6;
pub const KERN_NOT_RECEIVER: ::std::os::raw::c_uchar = 7;
pub const KERN_NO_ACCESS: ::std::os::raw::c_uchar = 8;
pub const KERN_MEMORY_FAILURE: ::std::os::raw::c_uchar = 9;
pub const KERN_MEMORY_ERROR: ::std::os::raw::c_uchar = 10;
pub const KERN_ALREADY_IN_SET: ::std::os::raw::c_uchar = 11;
pub const KERN_NOT_IN_SET: ::std::os::raw::c_uchar = 12;
pub const KERN_NAME_EXISTS: ::std::os::raw::c_uchar = 13;
pub const KERN_ABORTED: ::std::os::raw::c_uchar = 14;
pub const KERN_INVALID_NAME: ::std::os::raw::c_uchar = 15;
pub const KERN_INVALID_TASK: ::std::os::raw::c_uchar = 16;
pub const KERN_INVALID_RIGHT: ::std::os::raw::c_uchar = 17;
pub const KERN_INVALID_VALUE: ::std::os::raw::c_uchar = 18;
pub const KERN_UREFS_OVERFLOW: ::std::os::raw::c_uchar = 19;
pub const KERN_INVALID_CAPABILITY: ::std::os::raw::c_uchar = 20;
pub const KERN_RIGHT_EXISTS: ::std::os::raw::c_uchar = 21;
pub const KERN_INVALID_HOST: ::std::os::raw::c_uchar = 22;
pub const KERN_MEMORY_PRESENT: ::std::os::raw::c_uchar = 23;
pub const KERN_MEMORY_DATA_MOVED: ::std::os::raw::c_uchar = 24;
pub const KERN_MEMORY_RESTART_COPY: ::std::os::raw::c_uchar = 25;
pub const KERN_INVALID_PROCESSOR_SET: ::std::os::raw::c_uchar = 26;
pub const KERN_POLICY_LIMIT: ::std::os::raw::c_uchar = 27;
pub const KERN_INVALID_POLICY: ::std::os::raw::c_uchar = 28;
pub const KERN_INVALID_OBJECT: ::std::os::raw::c_uchar = 29;
pub const KERN_ALREADY_WAITING: ::std::os::raw::c_uchar = 30;
pub const KERN_DEFAULT_SET: ::std::os::raw::c_uchar = 31;
pub const KERN_EXCEPTION_PROTECTED: ::std::os::raw::c_uchar = 32;
pub const KERN_INVALID_LEDGER: ::std::os::raw::c_uchar = 33;
pub const KERN_INVALID_MEMORY_CONTROL: ::std::os::raw::c_uchar = 34;
pub const KERN_INVALID_SECURITY: ::std::os::raw::c_uchar = 35;
pub const KERN_NOT_DEPRESSED: ::std::os::raw::c_uchar = 36;
pub const KERN_TERMINATED: ::std::os::raw::c_uchar = 37;
pub const KERN_LOCK_SET_DESTROYED: ::std::os::raw::c_uchar = 38;
pub const KERN_LOCK_UNSTABLE: ::std::os::raw::c_uchar = 39;
pub const KERN_LOCK_OWNED: ::std::os::raw::c_uchar = 40;
pub const KERN_LOCK_OWNED_SELF: ::std::os::raw::c_uchar = 41;
pub const KERN_SEMAPHORE_DESTROYED: ::std::os::raw::c_uchar = 42;
pub const KERN_RPC_SERVER_TERMINATED: ::std::os::raw::c_uchar = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: ::std::os::raw::c_uchar = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: ::std::os::raw::c_uchar = 45;
pub const KERN_NOT_SUPPORTED: ::std::os::raw::c_uchar = 46;
pub const KERN_NODE_DOWN: ::std::os::raw::c_uchar = 47;
pub const KERN_NOT_WAITING: ::std::os::raw::c_uchar = 48;
pub const KERN_OPERATION_TIMED_OUT: ::std::os::raw::c_uchar = 49;
pub const KERN_CODESIGN_ERROR: ::std::os::raw::c_uchar = 50;
pub const KERN_POLICY_STATIC: ::std::os::raw::c_uchar = 51;
pub const KERN_RETURN_MAX: ::std::os::raw::c_ushort = 256;
pub const MACH_MSGH_BITS_ZERO: ::std::os::raw::c_uchar = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: ::std::os::raw::c_uchar = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: ::std::os::raw::c_ushort = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: ::std::os::raw::c_uint = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: ::std::os::raw::c_uint = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: ::std::os::raw::c_uint = 2147483648;
pub const MACH_MSGH_BITS_USER: ::std::os::raw::c_uint = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: ::std::os::raw::c_uint = 536870912;
pub const MACH_MSGH_BITS_DENAP: ::std::os::raw::c_uint = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: ::std::os::raw::c_uint = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: ::std::os::raw::c_uint = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: ::std::os::raw::c_uint = 268435456;
pub const MACH_MSGH_BITS_USED: ::std::os::raw::c_uint = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: ::std::os::raw::c_uchar = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: ::std::os::raw::c_uchar = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: ::std::os::raw::c_uchar = 18;
pub const MACH_MSG_TYPE_COPY_SEND: ::std::os::raw::c_uchar = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: ::std::os::raw::c_uchar = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: ::std::os::raw::c_uchar = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: ::std::os::raw::c_uchar = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: ::std::os::raw::c_uchar = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: ::std::os::raw::c_uchar = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: ::std::os::raw::c_uchar = 26;
pub const MACH_MSG_PHYSICAL_COPY: ::std::os::raw::c_uchar = 0;
pub const MACH_MSG_VIRTUAL_COPY: ::std::os::raw::c_uchar = 1;
pub const MACH_MSG_ALLOCATE: ::std::os::raw::c_uchar = 2;
pub const MACH_MSG_OVERWRITE: ::std::os::raw::c_uchar = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: ::std::os::raw::c_uchar = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: ::std::os::raw::c_uchar = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: ::std::os::raw::c_uchar = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: ::std::os::raw::c_uchar = 3;
pub const MACH_MSG_TRAILER_FORMAT_0: ::std::os::raw::c_uchar = 0;
pub const MACH_MSGH_KIND_NORMAL: ::std::os::raw::c_uchar = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: ::std::os::raw::c_uchar = 1;
pub const MACH_MSG_TYPE_PORT_NONE: ::std::os::raw::c_uchar = 0;
pub const MACH_MSG_TYPE_PORT_NAME: ::std::os::raw::c_uchar = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: ::std::os::raw::c_uchar = 16;
pub const MACH_MSG_TYPE_PORT_SEND: ::std::os::raw::c_uchar = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: ::std::os::raw::c_uchar = 18;
pub const MACH_MSG_TYPE_LAST: ::std::os::raw::c_uchar = 22;
pub const MACH_MSG_OPTION_NONE: ::std::os::raw::c_uchar = 0;
pub const MACH_SEND_MSG: ::std::os::raw::c_uchar = 1;
pub const MACH_RCV_MSG: ::std::os::raw::c_uchar = 2;
pub const MACH_RCV_LARGE: ::std::os::raw::c_uchar = 4;
pub const MACH_RCV_LARGE_IDENTITY: ::std::os::raw::c_uchar = 8;
pub const MACH_SEND_TIMEOUT: ::std::os::raw::c_uchar = 16;
pub const MACH_SEND_INTERRUPT: ::std::os::raw::c_uchar = 64;
pub const MACH_SEND_NOTIFY: ::std::os::raw::c_uchar = 128;
pub const MACH_SEND_ALWAYS: ::std::os::raw::c_uint = 65536;
pub const MACH_SEND_TRAILER: ::std::os::raw::c_uint = 131072;
pub const MACH_SEND_NOIMPORTANCE: ::std::os::raw::c_uint = 262144;
pub const MACH_SEND_NODENAP: ::std::os::raw::c_uint = 262144;
pub const MACH_SEND_IMPORTANCE: ::std::os::raw::c_uint = 524288;
pub const MACH_RCV_TIMEOUT: ::std::os::raw::c_ushort = 256;
pub const MACH_RCV_NOTIFY: ::std::os::raw::c_ushort = 512;
pub const MACH_RCV_INTERRUPT: ::std::os::raw::c_ushort = 1024;
pub const MACH_RCV_VOUCHER: ::std::os::raw::c_ushort = 2048;
pub const MACH_RCV_OVERWRITE: ::std::os::raw::c_ushort = 4096;
pub const MACH_RCV_TRAILER_NULL: ::std::os::raw::c_uchar = 0;
pub const MACH_RCV_TRAILER_SEQNO: ::std::os::raw::c_uchar = 1;
pub const MACH_RCV_TRAILER_SENDER: ::std::os::raw::c_uchar = 2;
pub const MACH_RCV_TRAILER_AUDIT: ::std::os::raw::c_uchar = 3;
pub const MACH_RCV_TRAILER_CTX: ::std::os::raw::c_uchar = 4;
pub const MACH_RCV_TRAILER_AV: ::std::os::raw::c_uchar = 7;
pub const MACH_RCV_TRAILER_LABELS: ::std::os::raw::c_uchar = 8;
pub const MACH_RCV_TRAILER_MASK: ::std::os::raw::c_uint = 251658240;
pub const MACH_MSG_SUCCESS: ::std::os::raw::c_uchar = 0;
pub const MACH_MSG_MASK: ::std::os::raw::c_ushort = 15872;
pub const MACH_MSG_IPC_SPACE: ::std::os::raw::c_ushort = 8192;
pub const MACH_MSG_VM_SPACE: ::std::os::raw::c_ushort = 4096;
pub const MACH_MSG_IPC_KERNEL: ::std::os::raw::c_ushort = 2048;
pub const MACH_MSG_VM_KERNEL: ::std::os::raw::c_ushort = 1024;
pub const MACH_SEND_IN_PROGRESS: ::std::os::raw::c_uint = 268435457;
pub const MACH_SEND_INVALID_DATA: ::std::os::raw::c_uint = 268435458;
pub const MACH_SEND_INVALID_DEST: ::std::os::raw::c_uint = 268435459;
pub const MACH_SEND_TIMED_OUT: ::std::os::raw::c_uint = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: ::std::os::raw::c_uint = 268435461;
pub const MACH_SEND_INTERRUPTED: ::std::os::raw::c_uint = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: ::std::os::raw::c_uint = 268435464;
pub const MACH_SEND_INVALID_REPLY: ::std::os::raw::c_uint = 268435465;
pub const MACH_SEND_INVALID_RIGHT: ::std::os::raw::c_uint = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: ::std::os::raw::c_uint = 268435467;
pub const MACH_SEND_INVALID_MEMORY: ::std::os::raw::c_uint = 268435468;
pub const MACH_SEND_NO_BUFFER: ::std::os::raw::c_uint = 268435469;
pub const MACH_SEND_TOO_LARGE: ::std::os::raw::c_uint = 268435470;
pub const MACH_SEND_INVALID_TYPE: ::std::os::raw::c_uint = 268435471;
pub const MACH_SEND_INVALID_HEADER: ::std::os::raw::c_uint = 268435472;
pub const MACH_SEND_INVALID_TRAILER: ::std::os::raw::c_uint = 268435473;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: ::std::os::raw::c_uint = 268435477;
pub const MACH_RCV_IN_PROGRESS: ::std::os::raw::c_uint = 268451841;
pub const MACH_RCV_INVALID_NAME: ::std::os::raw::c_uint = 268451842;
pub const MACH_RCV_TIMED_OUT: ::std::os::raw::c_uint = 268451843;
pub const MACH_RCV_TOO_LARGE: ::std::os::raw::c_uint = 268451844;
pub const MACH_RCV_INTERRUPTED: ::std::os::raw::c_uint = 268451845;
pub const MACH_RCV_PORT_CHANGED: ::std::os::raw::c_uint = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: ::std::os::raw::c_uint = 268451847;
pub const MACH_RCV_INVALID_DATA: ::std::os::raw::c_uint = 268451848;
pub const MACH_RCV_PORT_DIED: ::std::os::raw::c_uint = 268451849;
pub const MACH_RCV_IN_SET: ::std::os::raw::c_uint = 268451850;
pub const MACH_RCV_HEADER_ERROR: ::std::os::raw::c_uint = 268451851;
pub const MACH_RCV_BODY_ERROR: ::std::os::raw::c_uint = 268451852;
pub const MACH_RCV_INVALID_TYPE: ::std::os::raw::c_uint = 268451853;
pub const MACH_RCV_SCATTER_SMALL: ::std::os::raw::c_uint = 268451854;
pub const MACH_RCV_INVALID_TRAILER: ::std::os::raw::c_uint = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: ::std::os::raw::c_uint = 268451857;
pub const FPC_IE: ::std::os::raw::c_uchar = 1;
pub const FPC_IM: ::std::os::raw::c_uchar = 1;
pub const FPC_DE: ::std::os::raw::c_uchar = 2;
pub const FPC_DM: ::std::os::raw::c_uchar = 2;
pub const FPC_ZE: ::std::os::raw::c_uchar = 4;
pub const FPC_ZM: ::std::os::raw::c_uchar = 4;
pub const FPC_OE: ::std::os::raw::c_uchar = 8;
pub const FPC_OM: ::std::os::raw::c_uchar = 8;
pub const FPC_UE: ::std::os::raw::c_uchar = 16;
pub const FPC_PE: ::std::os::raw::c_uchar = 32;
pub const FPC_PC: ::std::os::raw::c_ushort = 768;
pub const FPC_PC_24: ::std::os::raw::c_uchar = 0;
pub const FPC_PC_53: ::std::os::raw::c_ushort = 512;
pub const FPC_PC_64: ::std::os::raw::c_ushort = 768;
pub const FPC_RC: ::std::os::raw::c_ushort = 3072;
pub const FPC_RC_RN: ::std::os::raw::c_uchar = 0;
pub const FPC_RC_RD: ::std::os::raw::c_ushort = 1024;
pub const FPC_RC_RU: ::std::os::raw::c_ushort = 2048;
pub const FPC_RC_CHOP: ::std::os::raw::c_ushort = 3072;
pub const FPC_IC: ::std::os::raw::c_ushort = 4096;
pub const FPC_IC_PROJ: ::std::os::raw::c_uchar = 0;
pub const FPC_IC_AFF: ::std::os::raw::c_ushort = 4096;
pub const FPS_IE: ::std::os::raw::c_uchar = 1;
pub const FPS_DE: ::std::os::raw::c_uchar = 2;
pub const FPS_ZE: ::std::os::raw::c_uchar = 4;
pub const FPS_OE: ::std::os::raw::c_uchar = 8;
pub const FPS_UE: ::std::os::raw::c_uchar = 16;
pub const FPS_PE: ::std::os::raw::c_uchar = 32;
pub const FPS_SF: ::std::os::raw::c_uchar = 64;
pub const FPS_ES: ::std::os::raw::c_uchar = 128;
pub const FPS_C0: ::std::os::raw::c_ushort = 256;
pub const FPS_C1: ::std::os::raw::c_ushort = 512;
pub const FPS_C2: ::std::os::raw::c_ushort = 1024;
pub const FPS_TOS: ::std::os::raw::c_ushort = 14336;
pub const FPS_TOS_SHIFT: ::std::os::raw::c_uchar = 11;
pub const FPS_C3: ::std::os::raw::c_ushort = 16384;
pub const FPS_BUSY: ::std::os::raw::c_ushort = 32768;
pub const FP_NO: ::std::os::raw::c_uchar = 0;
pub const FP_SOFT: ::std::os::raw::c_uchar = 1;
pub const FP_287: ::std::os::raw::c_uchar = 2;
pub const FP_387: ::std::os::raw::c_uchar = 3;
pub const FP_FXSR: ::std::os::raw::c_uchar = 4;
pub const I386_THREAD_STATE_MAX: ::std::os::raw::c_uchar = 224;
pub const THREAD_STATE_MAX: ::std::os::raw::c_uchar = 224;
pub const EFL_CF: ::std::os::raw::c_uchar = 1;
pub const EFL_PF: ::std::os::raw::c_uchar = 4;
pub const EFL_AF: ::std::os::raw::c_uchar = 16;
pub const EFL_ZF: ::std::os::raw::c_uchar = 64;
pub const EFL_SF: ::std::os::raw::c_uchar = 128;
pub const EFL_TF: ::std::os::raw::c_ushort = 256;
pub const EFL_IF: ::std::os::raw::c_ushort = 512;
pub const EFL_DF: ::std::os::raw::c_ushort = 1024;
pub const EFL_OF: ::std::os::raw::c_ushort = 2048;
pub const EFL_IOPL: ::std::os::raw::c_ushort = 12288;
pub const EFL_IOPL_KERNEL: ::std::os::raw::c_uchar = 0;
pub const EFL_IOPL_USER: ::std::os::raw::c_ushort = 12288;
pub const EFL_NT: ::std::os::raw::c_ushort = 16384;
pub const EFL_RF: ::std::os::raw::c_uint = 65536;
pub const EFL_VM: ::std::os::raw::c_uint = 131072;
pub const EFL_AC: ::std::os::raw::c_uint = 262144;
pub const EFL_VIF: ::std::os::raw::c_uint = 524288;
pub const EFL_VIP: ::std::os::raw::c_uint = 1048576;
pub const EFL_ID: ::std::os::raw::c_uint = 2097152;
pub const EFL_CLR: ::std::os::raw::c_uint = 4294475816;
pub const EFL_SET: ::std::os::raw::c_uchar = 2;
pub const EFL_USER_SET: ::std::os::raw::c_ushort = 512;
pub const EFL_USER_CLEAR: ::std::os::raw::c_uint = 94208;
pub const i386_THREAD_STATE: ::std::os::raw::c_uchar = 1;
pub const i386_FLOAT_STATE: ::std::os::raw::c_uchar = 2;
pub const i386_EXCEPTION_STATE: ::std::os::raw::c_uchar = 3;
pub const x86_THREAD_STATE32: ::std::os::raw::c_uchar = 1;
pub const x86_FLOAT_STATE32: ::std::os::raw::c_uchar = 2;
pub const x86_EXCEPTION_STATE32: ::std::os::raw::c_uchar = 3;
pub const x86_THREAD_STATE64: ::std::os::raw::c_uchar = 4;
pub const x86_FLOAT_STATE64: ::std::os::raw::c_uchar = 5;
pub const x86_EXCEPTION_STATE64: ::std::os::raw::c_uchar = 6;
pub const x86_THREAD_STATE: ::std::os::raw::c_uchar = 7;
pub const x86_FLOAT_STATE: ::std::os::raw::c_uchar = 8;
pub const x86_EXCEPTION_STATE: ::std::os::raw::c_uchar = 9;
pub const x86_DEBUG_STATE32: ::std::os::raw::c_uchar = 10;
pub const x86_DEBUG_STATE64: ::std::os::raw::c_uchar = 11;
pub const x86_DEBUG_STATE: ::std::os::raw::c_uchar = 12;
pub const THREAD_STATE_NONE: ::std::os::raw::c_uchar = 13;
pub const x86_AVX_STATE32: ::std::os::raw::c_uchar = 16;
pub const x86_AVX_STATE64: ::std::os::raw::c_uchar = 17;
pub const x86_AVX_STATE: ::std::os::raw::c_uchar = 18;
pub const THREAD_MACHINE_STATE_MAX: ::std::os::raw::c_uchar = 224;
pub const USER_CODE_SELECTOR: ::std::os::raw::c_uchar = 23;
pub const USER_DATA_SELECTOR: ::std::os::raw::c_uchar = 31;
pub const KERN_CODE_SELECTOR: ::std::os::raw::c_uchar = 8;
pub const KERN_DATA_SELECTOR: ::std::os::raw::c_uchar = 16;
pub const MACHINE_THREAD_STATE: ::std::os::raw::c_uchar = 7;
pub const MH_MAGIC: ::std::os::raw::c_uint = 4277009102;
pub const MH_CIGAM: ::std::os::raw::c_uint = 3472551422;
pub const MH_MAGIC_64: ::std::os::raw::c_uint = 4277009103;
pub const MH_CIGAM_64: ::std::os::raw::c_uint = 3489328638;
pub const MH_OBJECT: ::std::os::raw::c_uchar = 1;
pub const MH_EXECUTE: ::std::os::raw::c_uchar = 2;
pub const MH_FVMLIB: ::std::os::raw::c_uchar = 3;
pub const MH_CORE: ::std::os::raw::c_uchar = 4;
pub const MH_PRELOAD: ::std::os::raw::c_uchar = 5;
pub const MH_DYLIB: ::std::os::raw::c_uchar = 6;
pub const MH_DYLINKER: ::std::os::raw::c_uchar = 7;
pub const MH_BUNDLE: ::std::os::raw::c_uchar = 8;
pub const MH_DYLIB_STUB: ::std::os::raw::c_uchar = 9;
pub const MH_DSYM: ::std::os::raw::c_uchar = 10;
pub const MH_KEXT_BUNDLE: ::std::os::raw::c_uchar = 11;
pub const MH_NOUNDEFS: ::std::os::raw::c_uchar = 1;
pub const MH_INCRLINK: ::std::os::raw::c_uchar = 2;
pub const MH_DYLDLINK: ::std::os::raw::c_uchar = 4;
pub const MH_BINDATLOAD: ::std::os::raw::c_uchar = 8;
pub const MH_PREBOUND: ::std::os::raw::c_uchar = 16;
pub const MH_SPLIT_SEGS: ::std::os::raw::c_uchar = 32;
pub const MH_LAZY_INIT: ::std::os::raw::c_uchar = 64;
pub const MH_TWOLEVEL: ::std::os::raw::c_uchar = 128;
pub const MH_FORCE_FLAT: ::std::os::raw::c_ushort = 256;
pub const MH_NOMULTIDEFS: ::std::os::raw::c_ushort = 512;
pub const MH_NOFIXPREBINDING: ::std::os::raw::c_ushort = 1024;
pub const MH_PREBINDABLE: ::std::os::raw::c_ushort = 2048;
pub const MH_ALLMODSBOUND: ::std::os::raw::c_ushort = 4096;
pub const MH_SUBSECTIONS_VIA_SYMBOLS: ::std::os::raw::c_ushort = 8192;
pub const MH_CANONICAL: ::std::os::raw::c_ushort = 16384;
pub const MH_WEAK_DEFINES: ::std::os::raw::c_ushort = 32768;
pub const MH_BINDS_TO_WEAK: ::std::os::raw::c_uint = 65536;
pub const MH_ALLOW_STACK_EXECUTION: ::std::os::raw::c_uint = 131072;
pub const MH_ROOT_SAFE: ::std::os::raw::c_uint = 262144;
pub const MH_SETUID_SAFE: ::std::os::raw::c_uint = 524288;
pub const MH_NO_REEXPORTED_DYLIBS: ::std::os::raw::c_uint = 1048576;
pub const MH_PIE: ::std::os::raw::c_uint = 2097152;
pub const MH_DEAD_STRIPPABLE_DYLIB: ::std::os::raw::c_uint = 4194304;
pub const MH_HAS_TLV_DESCRIPTORS: ::std::os::raw::c_uint = 8388608;
pub const MH_NO_HEAP_EXECUTION: ::std::os::raw::c_uint = 16777216;
pub const MH_APP_EXTENSION_SAFE: ::std::os::raw::c_uint = 33554432;
pub const LC_REQ_DYLD: ::std::os::raw::c_uint = 2147483648;
pub const LC_SEGMENT: ::std::os::raw::c_uchar = 1;
pub const LC_SYMTAB: ::std::os::raw::c_uchar = 2;
pub const LC_SYMSEG: ::std::os::raw::c_uchar = 3;
pub const LC_THREAD: ::std::os::raw::c_uchar = 4;
pub const LC_UNIXTHREAD: ::std::os::raw::c_uchar = 5;
pub const LC_LOADFVMLIB: ::std::os::raw::c_uchar = 6;
pub const LC_IDFVMLIB: ::std::os::raw::c_uchar = 7;
pub const LC_IDENT: ::std::os::raw::c_uchar = 8;
pub const LC_FVMFILE: ::std::os::raw::c_uchar = 9;
pub const LC_PREPAGE: ::std::os::raw::c_uchar = 10;
pub const LC_DYSYMTAB: ::std::os::raw::c_uchar = 11;
pub const LC_LOAD_DYLIB: ::std::os::raw::c_uchar = 12;
pub const LC_ID_DYLIB: ::std::os::raw::c_uchar = 13;
pub const LC_LOAD_DYLINKER: ::std::os::raw::c_uchar = 14;
pub const LC_ID_DYLINKER: ::std::os::raw::c_uchar = 15;
pub const LC_PREBOUND_DYLIB: ::std::os::raw::c_uchar = 16;
pub const LC_ROUTINES: ::std::os::raw::c_uchar = 17;
pub const LC_SUB_FRAMEWORK: ::std::os::raw::c_uchar = 18;
pub const LC_SUB_UMBRELLA: ::std::os::raw::c_uchar = 19;
pub const LC_SUB_CLIENT: ::std::os::raw::c_uchar = 20;
pub const LC_SUB_LIBRARY: ::std::os::raw::c_uchar = 21;
pub const LC_TWOLEVEL_HINTS: ::std::os::raw::c_uchar = 22;
pub const LC_PREBIND_CKSUM: ::std::os::raw::c_uchar = 23;
pub const LC_LOAD_WEAK_DYLIB: ::std::os::raw::c_uint = 2147483672;
pub const LC_SEGMENT_64: ::std::os::raw::c_uchar = 25;
pub const LC_ROUTINES_64: ::std::os::raw::c_uchar = 26;
pub const LC_UUID: ::std::os::raw::c_uchar = 27;
pub const LC_RPATH: ::std::os::raw::c_uint = 2147483676;
pub const LC_CODE_SIGNATURE: ::std::os::raw::c_uchar = 29;
pub const LC_SEGMENT_SPLIT_INFO: ::std::os::raw::c_uchar = 30;
pub const LC_REEXPORT_DYLIB: ::std::os::raw::c_uint = 2147483679;
pub const LC_LAZY_LOAD_DYLIB: ::std::os::raw::c_uchar = 32;
pub const LC_ENCRYPTION_INFO: ::std::os::raw::c_uchar = 33;
pub const LC_DYLD_INFO: ::std::os::raw::c_uchar = 34;
pub const LC_DYLD_INFO_ONLY: ::std::os::raw::c_uint = 2147483682;
pub const LC_LOAD_UPWARD_DYLIB: ::std::os::raw::c_uint = 2147483683;
pub const LC_VERSION_MIN_MACOSX: ::std::os::raw::c_uchar = 36;
pub const LC_VERSION_MIN_IPHONEOS: ::std::os::raw::c_uchar = 37;
pub const LC_FUNCTION_STARTS: ::std::os::raw::c_uchar = 38;
pub const LC_DYLD_ENVIRONMENT: ::std::os::raw::c_uchar = 39;
pub const LC_MAIN: ::std::os::raw::c_uint = 2147483688;
pub const LC_DATA_IN_CODE: ::std::os::raw::c_uchar = 41;
pub const LC_SOURCE_VERSION: ::std::os::raw::c_uchar = 42;
pub const LC_DYLIB_CODE_SIGN_DRS: ::std::os::raw::c_uchar = 43;
pub const LC_ENCRYPTION_INFO_64: ::std::os::raw::c_uchar = 44;
pub const LC_LINKER_OPTION: ::std::os::raw::c_uchar = 45;
pub const LC_LINKER_OPTIMIZATION_HINT: ::std::os::raw::c_uchar = 46;
pub const SG_HIGHVM: ::std::os::raw::c_uchar = 1;
pub const SG_FVMLIB: ::std::os::raw::c_uchar = 2;
pub const SG_NORELOC: ::std::os::raw::c_uchar = 4;
pub const SG_PROTECTED_VERSION_1: ::std::os::raw::c_uchar = 8;
pub const SECTION_TYPE: ::std::os::raw::c_uchar = 255;
pub const SECTION_ATTRIBUTES: ::std::os::raw::c_uint = 4294967040;
pub const S_REGULAR: ::std::os::raw::c_uchar = 0;
pub const S_ZEROFILL: ::std::os::raw::c_uchar = 1;
pub const S_CSTRING_LITERALS: ::std::os::raw::c_uchar = 2;
pub const S_4BYTE_LITERALS: ::std::os::raw::c_uchar = 3;
pub const S_8BYTE_LITERALS: ::std::os::raw::c_uchar = 4;
pub const S_LITERAL_POINTERS: ::std::os::raw::c_uchar = 5;
pub const S_NON_LAZY_SYMBOL_POINTERS: ::std::os::raw::c_uchar = 6;
pub const S_LAZY_SYMBOL_POINTERS: ::std::os::raw::c_uchar = 7;
pub const S_SYMBOL_STUBS: ::std::os::raw::c_uchar = 8;
pub const S_MOD_INIT_FUNC_POINTERS: ::std::os::raw::c_uchar = 9;
pub const S_MOD_TERM_FUNC_POINTERS: ::std::os::raw::c_uchar = 10;
pub const S_COALESCED: ::std::os::raw::c_uchar = 11;
pub const S_GB_ZEROFILL: ::std::os::raw::c_uchar = 12;
pub const S_INTERPOSING: ::std::os::raw::c_uchar = 13;
pub const S_16BYTE_LITERALS: ::std::os::raw::c_uchar = 14;
pub const S_DTRACE_DOF: ::std::os::raw::c_uchar = 15;
pub const S_LAZY_DYLIB_SYMBOL_POINTERS: ::std::os::raw::c_uchar = 16;
pub const S_THREAD_LOCAL_REGULAR: ::std::os::raw::c_uchar = 17;
pub const S_THREAD_LOCAL_ZEROFILL: ::std::os::raw::c_uchar = 18;
pub const S_THREAD_LOCAL_VARIABLES: ::std::os::raw::c_uchar = 19;
pub const S_THREAD_LOCAL_VARIABLE_POINTERS: ::std::os::raw::c_uchar = 20;
pub const S_THREAD_LOCAL_INIT_FUNCTION_POINTERS: ::std::os::raw::c_uchar = 21;
pub const SECTION_ATTRIBUTES_USR: ::std::os::raw::c_uint = 4278190080;
pub const S_ATTR_PURE_INSTRUCTIONS: ::std::os::raw::c_uint = 2147483648;
pub const S_ATTR_NO_TOC: ::std::os::raw::c_uint = 1073741824;
pub const S_ATTR_STRIP_STATIC_SYMS: ::std::os::raw::c_uint = 536870912;
pub const S_ATTR_NO_DEAD_STRIP: ::std::os::raw::c_uint = 268435456;
pub const S_ATTR_LIVE_SUPPORT: ::std::os::raw::c_uint = 134217728;
pub const S_ATTR_SELF_MODIFYING_CODE: ::std::os::raw::c_uint = 67108864;
pub const S_ATTR_DEBUG: ::std::os::raw::c_uint = 33554432;
pub const SECTION_ATTRIBUTES_SYS: ::std::os::raw::c_uint = 16776960;
pub const S_ATTR_SOME_INSTRUCTIONS: ::std::os::raw::c_ushort = 1024;
pub const S_ATTR_EXT_RELOC: ::std::os::raw::c_ushort = 512;
pub const S_ATTR_LOC_RELOC: ::std::os::raw::c_ushort = 256;
pub const INDIRECT_SYMBOL_LOCAL: ::std::os::raw::c_uint = 2147483648;
pub const INDIRECT_SYMBOL_ABS: ::std::os::raw::c_uint = 1073741824;
pub const REBASE_TYPE_POINTER: ::std::os::raw::c_uchar = 1;
pub const REBASE_TYPE_TEXT_ABSOLUTE32: ::std::os::raw::c_uchar = 2;
pub const REBASE_TYPE_TEXT_PCREL32: ::std::os::raw::c_uchar = 3;
pub const REBASE_OPCODE_MASK: ::std::os::raw::c_uchar = 240;
pub const REBASE_IMMEDIATE_MASK: ::std::os::raw::c_uchar = 15;
pub const REBASE_OPCODE_DONE: ::std::os::raw::c_uchar = 0;
pub const REBASE_OPCODE_SET_TYPE_IMM: ::std::os::raw::c_uchar = 16;
pub const REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: ::std::os::raw::c_uchar =
    32;
pub const REBASE_OPCODE_ADD_ADDR_ULEB: ::std::os::raw::c_uchar = 48;
pub const REBASE_OPCODE_ADD_ADDR_IMM_SCALED: ::std::os::raw::c_uchar = 64;
pub const REBASE_OPCODE_DO_REBASE_IMM_TIMES: ::std::os::raw::c_uchar = 80;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES: ::std::os::raw::c_uchar = 96;
pub const REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: ::std::os::raw::c_uchar =
    112;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB:
          ::std::os::raw::c_uchar =
    128;
pub const BIND_TYPE_POINTER: ::std::os::raw::c_uchar = 1;
pub const BIND_TYPE_TEXT_ABSOLUTE32: ::std::os::raw::c_uchar = 2;
pub const BIND_TYPE_TEXT_PCREL32: ::std::os::raw::c_uchar = 3;
pub const BIND_SPECIAL_DYLIB_SELF: ::std::os::raw::c_uchar = 0;
pub const BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: ::std::os::raw::c_char = -1;
pub const BIND_SPECIAL_DYLIB_FLAT_LOOKUP: ::std::os::raw::c_char = -2;
pub const BIND_SYMBOL_FLAGS_WEAK_IMPORT: ::std::os::raw::c_uchar = 1;
pub const BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: ::std::os::raw::c_uchar = 8;
pub const BIND_OPCODE_MASK: ::std::os::raw::c_uchar = 240;
pub const BIND_IMMEDIATE_MASK: ::std::os::raw::c_uchar = 15;
pub const BIND_OPCODE_DONE: ::std::os::raw::c_uchar = 0;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: ::std::os::raw::c_uchar = 16;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: ::std::os::raw::c_uchar = 32;
pub const BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: ::std::os::raw::c_uchar = 48;
pub const BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: ::std::os::raw::c_uchar =
    64;
pub const BIND_OPCODE_SET_TYPE_IMM: ::std::os::raw::c_uchar = 80;
pub const BIND_OPCODE_SET_ADDEND_SLEB: ::std::os::raw::c_uchar = 96;
pub const BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: ::std::os::raw::c_uchar =
    112;
pub const BIND_OPCODE_ADD_ADDR_ULEB: ::std::os::raw::c_uchar = 128;
pub const BIND_OPCODE_DO_BIND: ::std::os::raw::c_uchar = 144;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: ::std::os::raw::c_uchar = 160;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: ::std::os::raw::c_uchar =
    176;
pub const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB:
          ::std::os::raw::c_uchar =
    192;
pub const EXPORT_SYMBOL_FLAGS_KIND_MASK: ::std::os::raw::c_uchar = 3;
pub const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: ::std::os::raw::c_uchar = 0;
pub const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: ::std::os::raw::c_uchar = 1;
pub const EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION: ::std::os::raw::c_uchar = 4;
pub const EXPORT_SYMBOL_FLAGS_REEXPORT: ::std::os::raw::c_uchar = 8;
pub const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: ::std::os::raw::c_uchar = 16;
pub const DICE_KIND_DATA: ::std::os::raw::c_uchar = 1;
pub const DICE_KIND_JUMP_TABLE8: ::std::os::raw::c_uchar = 2;
pub const DICE_KIND_JUMP_TABLE16: ::std::os::raw::c_uchar = 3;
pub const DICE_KIND_JUMP_TABLE32: ::std::os::raw::c_uchar = 4;
pub const DICE_KIND_ABS_JUMP_TABLE32: ::std::os::raw::c_uchar = 5;
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl ::std::default::Default for __darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for _opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for _opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for _opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for _opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = uintptr_t;
pub type vm_size_t = uintptr_t;
pub type mach_vm_address_t = uint64_t;
pub type mach_vm_offset_t = uint64_t;
pub type mach_vm_size_t = uint64_t;
pub type vm_map_offset_t = uint64_t;
pub type vm_map_address_t = uint64_t;
pub type vm_map_size_t = uint64_t;
pub type mach_port_context_t = mach_vm_address_t;
pub type boolean_t = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
pub type vm_prot_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
impl ::std::default::Default for __darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_fp_control {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for __darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_fp_status {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for __darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
impl ::std::default::Default for __darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for __darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for __darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
impl ::std::clone::Clone for __darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::default::Default for __darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
impl ::std::default::Default for __darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::default::Default for __darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for __darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
impl ::std::clone::Clone for __darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::default::Default for __darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::default::Default for __darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
impl ::std::default::Default for mach_port_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
impl ::std::default::Default for mach_port_limits {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [uint32_t; 6usize],
}
impl ::std::default::Default for mach_port_info_ext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_info_ext_t = mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_qos {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: boolean_t,
    pub len: natural_t,
}
impl ::std::default::Default for mach_port_qos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_port_options {
    pub flags: uint32_t,
    pub mpl: mach_port_limits_t,
    pub reserved: [uint64_t; 2usize],
}
impl ::std::default::Default for mach_port_options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum mach_port_guard_exception_codes {
    kGUARD_EXC_DESTROY = 1,
    kGUARD_EXC_MOD_REFS = 2,
    kGUARD_EXC_SET_CONTEXT = 4,
    kGUARD_EXC_UNGUARDED = 8,
    kGUARD_EXC_INCORRECT_GUARD = 16,
}
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_type_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_type_name_t,
    pub _bindgen_bitfield_3_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_port_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: uint32_t,
    pub size: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_ool_descriptor32_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_descriptor64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: uint32_t,
    pub count: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::default::Default for mach_msg_ool_ports_descriptor32_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_ports_descriptor64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_ool_ports_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_descriptor_t {
    pub _bindgen_data_: [u32; 4usize],
}
impl mach_msg_descriptor_t {
    pub unsafe fn port(&mut self) -> *mut mach_msg_port_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn out_of_line(&mut self) -> *mut mach_msg_ool_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ool_ports(&mut self)
     -> *mut mach_msg_ool_ports_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn type_(&mut self) -> *mut mach_msg_type_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for mach_msg_descriptor_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
impl ::std::default::Default for mach_msg_body_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
impl ::std::default::Default for mach_msg_header_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
impl ::std::default::Default for mach_msg_base_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
impl ::std::default::Default for mach_msg_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
impl ::std::default::Default for mach_msg_seqno_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
impl ::std::default::Default for security_token_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
impl ::std::default::Default for mach_msg_security_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
impl ::std::default::Default for audit_token_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
impl ::std::default::Default for mach_msg_audit_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
impl ::std::default::Default for mach_msg_context_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
impl ::std::default::Default for msg_labels_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::std::os::raw::c_int,
    pub msgh_labels: msg_labels_t,
}
impl ::std::default::Default for mach_msg_mac_trailer_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
impl ::std::default::Default for mach_msg_empty_send_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
impl ::std::default::Default for mach_msg_empty_rcv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_msg_empty_t {
    pub _bindgen_data_: [u32; 8usize],
}
impl mach_msg_empty_t {
    pub unsafe fn send(&mut self) -> *mut mach_msg_empty_send_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rcv(&mut self) -> *mut mach_msg_empty_rcv_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for mach_msg_empty_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_state_hdr {
    pub flavor: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
impl ::std::default::Default for x86_state_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: Union_Unnamed1,
}
impl ::std::default::Default for x86_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 21usize],
}
impl Union_Unnamed1 {
    pub unsafe fn ts32(&mut self) -> *mut x86_thread_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ts64(&mut self) -> *mut x86_thread_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: Union_Unnamed2,
}
impl ::std::default::Default for x86_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u32; 131usize],
}
impl ::std::clone::Clone for Union_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::fmt::Debug for Union_Unnamed2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "Union_Unnamed2 {{ ... }}")
    }
}
impl Union_Unnamed2 {
    pub unsafe fn fs32(&mut self) -> *mut x86_float_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fs64(&mut self) -> *mut x86_float_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: Union_Unnamed3,
}
impl ::std::default::Default for x86_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed3 {
    pub unsafe fn es32(&mut self) -> *mut x86_exception_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn es64(&mut self) -> *mut x86_exception_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: Union_Unnamed4,
}
impl ::std::default::Default for x86_debug_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 8usize],
}
impl Union_Unnamed4 {
    pub unsafe fn ds32(&mut self) -> *mut x86_debug_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ds64(&mut self) -> *mut x86_debug_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: Union_Unnamed5,
}
impl ::std::default::Default for x86_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 211usize],
}
impl ::std::clone::Clone for Union_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::fmt::Debug for Union_Unnamed5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "Union_Unnamed5 {{ ... }}")
    }
}
impl Union_Unnamed5 {
    pub unsafe fn as32(&mut self) -> *mut x86_avx_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as64(&mut self) -> *mut x86_avx_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    OSUnknownByteOrder = 0,
    OSLittleEndian = 1,
    OSBigEndian = 2,
}
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NXByteOrder {
    NX_UnknownByteOrder = 0,
    NX_LittleEndian = 1,
    NX_BigEndian = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_header {
    pub magic: uint32_t,
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub filetype: uint32_t,
    pub ncmds: uint32_t,
    pub sizeofcmds: uint32_t,
    pub flags: uint32_t,
}
impl ::std::default::Default for mach_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mach_header_64 {
    pub magic: uint32_t,
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub filetype: uint32_t,
    pub ncmds: uint32_t,
    pub sizeofcmds: uint32_t,
    pub flags: uint32_t,
    pub reserved: uint32_t,
}
impl ::std::default::Default for mach_header_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct load_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
}
impl ::std::default::Default for load_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lc_str {
    pub _bindgen_data_: [u32; 1usize],
}
impl lc_str {
    pub unsafe fn offset(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for lc_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct segment_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: uint32_t,
    pub vmsize: uint32_t,
    pub fileoff: uint32_t,
    pub filesize: uint32_t,
    pub maxprot: vm_prot_t,
    pub initprot: vm_prot_t,
    pub nsects: uint32_t,
    pub flags: uint32_t,
}
impl ::std::default::Default for segment_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct segment_command_64 {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: uint64_t,
    pub vmsize: uint64_t,
    pub fileoff: uint64_t,
    pub filesize: uint64_t,
    pub maxprot: vm_prot_t,
    pub initprot: vm_prot_t,
    pub nsects: uint32_t,
    pub flags: uint32_t,
}
impl ::std::default::Default for segment_command_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct section {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: uint32_t,
    pub size: uint32_t,
    pub offset: uint32_t,
    pub align: uint32_t,
    pub reloff: uint32_t,
    pub nreloc: uint32_t,
    pub flags: uint32_t,
    pub reserved1: uint32_t,
    pub reserved2: uint32_t,
}
impl ::std::default::Default for section {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct section_64 {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: uint64_t,
    pub size: uint64_t,
    pub offset: uint32_t,
    pub align: uint32_t,
    pub reloff: uint32_t,
    pub nreloc: uint32_t,
    pub flags: uint32_t,
    pub reserved1: uint32_t,
    pub reserved2: uint32_t,
    pub reserved3: uint32_t,
}
impl ::std::default::Default for section_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fvmlib {
    pub name: lc_str,
    pub minor_version: uint32_t,
    pub header_addr: uint32_t,
}
impl ::std::default::Default for fvmlib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fvmlib_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub fvmlib: fvmlib,
}
impl ::std::default::Default for fvmlib_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib {
    pub name: lc_str,
    pub timestamp: uint32_t,
    pub current_version: uint32_t,
    pub compatibility_version: uint32_t,
}
impl ::std::default::Default for dylib {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub dylib: dylib,
}
impl ::std::default::Default for dylib_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_framework_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub umbrella: lc_str,
}
impl ::std::default::Default for sub_framework_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_client_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub client: lc_str,
}
impl ::std::default::Default for sub_client_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_umbrella_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub sub_umbrella: lc_str,
}
impl ::std::default::Default for sub_umbrella_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sub_library_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub sub_library: lc_str,
}
impl ::std::default::Default for sub_library_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct prebound_dylib_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub name: lc_str,
    pub nmodules: uint32_t,
    pub linked_modules: lc_str,
}
impl ::std::default::Default for prebound_dylib_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylinker_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub name: lc_str,
}
impl ::std::default::Default for dylinker_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct thread_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
}
impl ::std::default::Default for thread_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct routines_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub init_address: uint32_t,
    pub init_module: uint32_t,
    pub reserved1: uint32_t,
    pub reserved2: uint32_t,
    pub reserved3: uint32_t,
    pub reserved4: uint32_t,
    pub reserved5: uint32_t,
    pub reserved6: uint32_t,
}
impl ::std::default::Default for routines_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct routines_command_64 {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub init_address: uint64_t,
    pub init_module: uint64_t,
    pub reserved1: uint64_t,
    pub reserved2: uint64_t,
    pub reserved3: uint64_t,
    pub reserved4: uint64_t,
    pub reserved5: uint64_t,
    pub reserved6: uint64_t,
}
impl ::std::default::Default for routines_command_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct symtab_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub symoff: uint32_t,
    pub nsyms: uint32_t,
    pub stroff: uint32_t,
    pub strsize: uint32_t,
}
impl ::std::default::Default for symtab_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dysymtab_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub ilocalsym: uint32_t,
    pub nlocalsym: uint32_t,
    pub iextdefsym: uint32_t,
    pub nextdefsym: uint32_t,
    pub iundefsym: uint32_t,
    pub nundefsym: uint32_t,
    pub tocoff: uint32_t,
    pub ntoc: uint32_t,
    pub modtaboff: uint32_t,
    pub nmodtab: uint32_t,
    pub extrefsymoff: uint32_t,
    pub nextrefsyms: uint32_t,
    pub indirectsymoff: uint32_t,
    pub nindirectsyms: uint32_t,
    pub extreloff: uint32_t,
    pub nextrel: uint32_t,
    pub locreloff: uint32_t,
    pub nlocrel: uint32_t,
}
impl ::std::default::Default for dysymtab_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_table_of_contents {
    pub symbol_index: uint32_t,
    pub module_index: uint32_t,
}
impl ::std::default::Default for dylib_table_of_contents {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_module {
    pub module_name: uint32_t,
    pub iextdefsym: uint32_t,
    pub nextdefsym: uint32_t,
    pub irefsym: uint32_t,
    pub nrefsym: uint32_t,
    pub ilocalsym: uint32_t,
    pub nlocalsym: uint32_t,
    pub iextrel: uint32_t,
    pub nextrel: uint32_t,
    pub iinit_iterm: uint32_t,
    pub ninit_nterm: uint32_t,
    pub objc_module_info_addr: uint32_t,
    pub objc_module_info_size: uint32_t,
}
impl ::std::default::Default for dylib_module {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_module_64 {
    pub module_name: uint32_t,
    pub iextdefsym: uint32_t,
    pub nextdefsym: uint32_t,
    pub irefsym: uint32_t,
    pub nrefsym: uint32_t,
    pub ilocalsym: uint32_t,
    pub nlocalsym: uint32_t,
    pub iextrel: uint32_t,
    pub nextrel: uint32_t,
    pub iinit_iterm: uint32_t,
    pub ninit_nterm: uint32_t,
    pub objc_module_info_size: uint32_t,
    pub objc_module_info_addr: uint64_t,
}
impl ::std::default::Default for dylib_module_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dylib_reference {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
}
impl ::std::default::Default for dylib_reference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct twolevel_hints_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub offset: uint32_t,
    pub nhints: uint32_t,
}
impl ::std::default::Default for twolevel_hints_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct twolevel_hint {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
}
impl ::std::default::Default for twolevel_hint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct prebind_cksum_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub cksum: uint32_t,
}
impl ::std::default::Default for prebind_cksum_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct uuid_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub uuid: [uint8_t; 16usize],
}
impl ::std::default::Default for uuid_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rpath_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub path: lc_str,
}
impl ::std::default::Default for rpath_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linkedit_data_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub dataoff: uint32_t,
    pub datasize: uint32_t,
}
impl ::std::default::Default for linkedit_data_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct encryption_info_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub cryptoff: uint32_t,
    pub cryptsize: uint32_t,
    pub cryptid: uint32_t,
}
impl ::std::default::Default for encryption_info_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct encryption_info_command_64 {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub cryptoff: uint32_t,
    pub cryptsize: uint32_t,
    pub cryptid: uint32_t,
    pub pad: uint32_t,
}
impl ::std::default::Default for encryption_info_command_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct version_min_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub version: uint32_t,
    pub sdk: uint32_t,
}
impl ::std::default::Default for version_min_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct dyld_info_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub rebase_off: uint32_t,
    pub rebase_size: uint32_t,
    pub bind_off: uint32_t,
    pub bind_size: uint32_t,
    pub weak_bind_off: uint32_t,
    pub weak_bind_size: uint32_t,
    pub lazy_bind_off: uint32_t,
    pub lazy_bind_size: uint32_t,
    pub export_off: uint32_t,
    pub export_size: uint32_t,
}
impl ::std::default::Default for dyld_info_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct linker_option_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub count: uint32_t,
}
impl ::std::default::Default for linker_option_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct symseg_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub offset: uint32_t,
    pub size: uint32_t,
}
impl ::std::default::Default for symseg_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ident_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
}
impl ::std::default::Default for ident_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fvmfile_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub name: lc_str,
    pub header_addr: uint32_t,
}
impl ::std::default::Default for fvmfile_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct entry_point_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub entryoff: uint64_t,
    pub stacksize: uint64_t,
}
impl ::std::default::Default for entry_point_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct source_version_command {
    pub cmd: uint32_t,
    pub cmdsize: uint32_t,
    pub version: uint64_t,
}
impl ::std::default::Default for source_version_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct data_in_code_entry {
    pub offset: uint32_t,
    pub length: uint16_t,
    pub kind: uint16_t,
}
impl ::std::default::Default for data_in_code_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tlv_descriptor {
    pub thunk: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut tlv_descriptor)
                                         -> *mut ::std::os::raw::c_void>,
    pub key: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
impl ::std::default::Default for tlv_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut KERNEL_SECURITY_TOKEN: security_token_t;
    pub static mut KERNEL_AUDIT_TOKEN: audit_token_t;
}
extern "C" {
    pub fn mach_msg_overwrite(msg: *mut mach_msg_header_t,
                              option: mach_msg_option_t,
                              send_size: mach_msg_size_t,
                              rcv_size: mach_msg_size_t,
                              rcv_name: mach_port_name_t,
                              timeout: mach_msg_timeout_t,
                              notify: mach_port_name_t,
                              rcv_msg: *mut mach_msg_header_t,
                              rcv_limit: mach_msg_size_t)
     -> mach_msg_return_t;
    pub fn mach_msg(msg: *mut mach_msg_header_t, option: mach_msg_option_t,
                    send_size: mach_msg_size_t, rcv_size: mach_msg_size_t,
                    rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t,
                    notify: mach_port_name_t) -> mach_msg_return_t;
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t)
     -> kern_return_t;
    pub fn getsectdata(segname: *const ::std::os::raw::c_char,
                       sectname: *const ::std::os::raw::c_char,
                       size: *mut ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
    pub fn getsectdatafromFramework(FrameworkName:
                                        *const ::std::os::raw::c_char,
                                    segname: *const ::std::os::raw::c_char,
                                    sectname: *const ::std::os::raw::c_char,
                                    size: *mut ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
    pub fn get_end() -> ::std::os::raw::c_ulong;
    pub fn get_etext() -> ::std::os::raw::c_ulong;
    pub fn get_edata() -> ::std::os::raw::c_ulong;
    pub fn getsectbyname(segname: *const ::std::os::raw::c_char,
                         sectname: *const ::std::os::raw::c_char)
     -> *const section_64;
    pub fn getsectiondata(mhp: *const mach_header_64,
                          segname: *const ::std::os::raw::c_char,
                          sectname: *const ::std::os::raw::c_char,
                          size: *mut ::std::os::raw::c_ulong) -> *mut uint8_t;
    pub fn getsegbyname(segname: *const ::std::os::raw::c_char)
     -> *const segment_command_64;
    pub fn getsegmentdata(mhp: *const mach_header_64,
                          segname: *const ::std::os::raw::c_char,
                          size: *mut ::std::os::raw::c_ulong) -> *mut uint8_t;
    pub fn getsectdatafromheader(mhp: *const mach_header,
                                 segname: *const ::std::os::raw::c_char,
                                 sectname: *const ::std::os::raw::c_char,
                                 size: *mut uint32_t)
     -> *mut ::std::os::raw::c_char;
    pub fn getsectbynamefromheader(mhp: *const mach_header,
                                   segname: *const ::std::os::raw::c_char,
                                   sectname: *const ::std::os::raw::c_char)
     -> *const section;
    pub fn getsectbynamefromheaderwithswap(mhp: *mut mach_header,
                                           segname:
                                               *const ::std::os::raw::c_char,
                                           sectname:
                                               *const ::std::os::raw::c_char,
                                           fSwap: ::std::os::raw::c_int)
     -> *const section;
    pub fn getsectdatafromheader_64(mhp: *const mach_header_64,
                                    segname: *const ::std::os::raw::c_char,
                                    sectname: *const ::std::os::raw::c_char,
                                    size: *mut uint64_t)
     -> *mut ::std::os::raw::c_char;
    pub fn getsectbynamefromheader_64(mhp: *const mach_header_64,
                                      segname: *const ::std::os::raw::c_char,
                                      sectname: *const ::std::os::raw::c_char)
     -> *const section_64;
    pub fn getsectbynamefromheaderwithswap_64(mhp: *mut mach_header_64,
                                              segname:
                                                  *const ::std::os::raw::c_char,
                                              sectname:
                                                  *const ::std::os::raw::c_char,
                                              fSwap: ::std::os::raw::c_int)
     -> *const section;
}
