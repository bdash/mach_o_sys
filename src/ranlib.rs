/* automatically generated by rust-bindgen 0.70.1 */

#![allow(
    dead_code,
    non_camel_case_types,
    non_upper_case_globals,
    non_snake_case
)]

pub const SYMDEF: &[u8; 10] = b"__.SYMDEF\0";
pub const SYMDEF_SORTED: &[u8; 17] = b"__.SYMDEF SORTED\0";
pub const SYMDEF_64: &[u8; 13] = b"__.SYMDEF_64\0";
pub const SYMDEF_64_SORTED: &[u8; 20] = b"__.SYMDEF_64 SORTED\0";
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ranlib {
    pub ran_un: ranlib__bindgen_ty_1,
    pub ran_off: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ranlib__bindgen_ty_1 {
    pub ran_strx: u32,
}
impl Default for ranlib__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ranlib {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ranlib_64 {
    pub ran_un: ranlib_64__bindgen_ty_1,
    pub ran_off: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ranlib_64__bindgen_ty_1 {
    pub ran_strx: u64,
}
impl Default for ranlib_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ranlib_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
